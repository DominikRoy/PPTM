(*Dolev-Yao model Open Channel*)
(*Channel between UAV A and UAV B*)
free c:channel.


(* RSA modulus *)
type N.

(* The attacker should not have knowledge of the actual identifier of the capsule mapped from  f (see paper Sec.4.2 step (4)) (secret).
Although, we define the secret as "weak" to check if offline brute-force or dictionary attacks are feasible. *)

free dA_i: bitstring [private].
weaksecret dA_i.
free dB_i_k: bitstring [private].
weaksecret dB_i_k.


(* Types, Constants and Variables *)
type radius.
type length.
type angle.
type origin.
type nonce.
type vector.
type index.




(* A formal query, specifying the attacker can't ever be leaked the
actual capsule identifiers during the protocol. *)
query attacker(dA_i).
query attacker(dB_i_k).

(*Verify the non interference property for the capsule identifiers A and B, which means that 
the different secrets are indistingishuable for the adversary strong secrecy.*)
noninterf dB_i_k.
noninterf dA_i.

(*Auxiliary Functions*)
fun hash(bitstring):bitstring.
fun map(bitstring):bitstring.(*secure function of 2H(x)+1*)
fun append(bitstring,bitstring):bitstring.
fun mod(bitstring,N):bitstring.
fun exp_mod(bitstring,bitstring,N):bitstring.
fun inv_mod(bitstring,N):bitstring.
fun extract_elem(vector,index):bitstring.
fun add_elem(vector,bitstring,index):vector.
fun map_trajectory(origin,angle,radius,length):vector.
(* Type converter *)
fun nonce_to_bitstring(nonce): bitstring [data,typeConverter].
(*Events*)
event end_UAV_A(vector).
event end_UAV_B(bitstring).



(* The process for UAV A*)
let uavA(nB:N) =
    (* Step (3) of Sec.4.2 in our paper*)
    new O_i:origin;
    new T_i:angle;
    new r_i:radius;
    new h_i:length;
    new xi_i:nonce;

    (* Step (6) of Sec.4.2, Eq.9*)
    let cA_i = exp_mod(nonce_to_bitstring(xi_i), dA_i, nB) in
    (* Step (7) of Sec.4.2*)
    out (c,(cA_i,O_i,T_i,r_i,h_i));
    (* Step (11) of Sec.4.2*)
    in (c, cB_i:vector);
    new k:index;
    let cB_i_k = extract_elem(cB_i,k) in
    (* Step (12) of Sec.4.2, Eq. 12*)
    let wA_i_k = hash(mod(nonce_to_bitstring(xi_i),nB)) in 
    (* Step (15) of Sec.4.2*)
    if wA_i_k = cB_i_k then ( 
        (* Step (13) of Sec.4.2, Eq. 14*)
        let wA_i = hash(mod(append(nonce_to_bitstring(xi_i),dA_i),nB)) in
        (* Step (16) of Sec.4.2 ==> paper*)
        out(c,wA_i);
    
        event end_UAV_A(cB_i)).








(* The process for UAV B*)
let uavB(nB:N) =
    (* Step (8) of Sec.4.2*)
    in(c, (cA_i:bitstring,O_i:origin,T_i:angle,r_i:radius,h_i:length));
    let GB_i = map_trajectory(O_i,T_i,r_i,h_i) in
    new k:index;
    (* Step (9) of Sec.4.2*)
    let eB_i_k = inv_mod(dB_i_k,nB) in
    (* Step (10) of Sec.4.2, Eq. 10*)
    let x_i_k = exp_mod(cA_i,eB_i_k,nB) in
    (* Step (10) of Sec.4.2, Eq. 11*)
    let cB_i_k = hash(x_i_k) in
    new cB_i:vector;
    let cB_i = add_elem(cB_i,cB_i_k,k) in
    (* Step (11) of Sec.4.2*)
    out (c, cB_i);
    (* Step (16) of Sec.4.2*)
    in (c, wA_i:bitstring);
    (* Step (17) of Sec.4.2, Eq. 15*)
    if wA_i = hash(mod(append(x_i_k,dB_i_k),nB)) then (
        event end_UAV_B(wA_i)).

process
    new nB: N;
    ((!uavA(nB)) | (!uavB(nB)))